{"version":3,"sources":["components/Header.js","utils/API.js","components/Search.js","components/Main.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","id","class","axios","get","Search","handleSearchChange","type","placeholder","onChange","e","Main","useState","users","setUsers","filteredUsers","setFilteredUsers","useEffect","API","then","results","console","log","data","event","searchTerm","target","value","filteredList","filter","user","Object","values","join","toLowerCase","indexOf","scope","onClick","sortedList","sort","a","b","name","first","localeCompare","map","login","picture","email","dob","key","uuid","src","medium","last","age","Wrapper","props","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gRAceA,MAVf,WACI,OACI,yBAAKC,UAAU,SAASC,GAAG,UACvB,yBAAKC,MAAM,YAAYD,GAAG,QAC1B,oE,wBCJG,EACG,WACV,OAAOE,IAAMC,IAAI,kDCKVC,MARf,YAAwC,IAAtBC,EAAqB,EAArBA,mBACd,OACI,yBAAKN,UAAU,QACX,2BAAOO,KAAK,SAASL,MAAM,eAAeD,GAAG,WAAWO,YAAY,SAASC,SAAU,SAAAC,GAAC,OAAIJ,EAAmBI,QCoE5GC,MApEf,WAAkB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAE6BF,mBAAS,IAFtC,mBAENG,EAFM,KAESC,EAFT,KAgCb,OA3BAC,qBAAU,WACNC,IAAmBC,MAAK,SAAAC,GACpBC,QAAQC,IAAIF,EAAQG,KAAKH,SACzBN,EAASM,EAAQG,KAAKH,SACtBJ,EAAiBI,EAAQG,KAAKH,cAEpC,IAuBE,yBAAKpB,UAAU,QACX,yBAAKE,MAAM,aACX,kBAAC,EAAD,CAAQI,mBAtBW,SAAAkB,GACvB,IAAMC,EAAaD,EAAME,OAAOC,MAC1BC,EAAef,EAAMgB,QAAQ,SAAAC,GAE/B,OAAqD,IADxCC,OAAOC,OAAOF,GAAMG,KAAK,IAAIC,cAC5BC,QAAQV,EAAWS,kBAErClB,EAAkBY,MAiBd,2BAAO1B,MAAM,QAAQD,GAAG,SACpB,2BAAOC,MAAM,aAAaD,GAAG,SACzB,4BACI,wBAAImC,MAAM,QACV,wBAAIA,MAAM,OAAV,cACA,wBAAIA,MAAM,MAAMC,QAAS,kBAlBhC,WACThB,QAAQC,IAAI,QACZ,IAAMgB,EAAavB,EAAcwB,MAAK,SAACC,EAAGC,GACvC,OAAOD,EAAEE,KAAKC,MAAMC,cAAcH,EAAEC,KAAKC,UAE5CtB,QAAQC,IAAIgB,GACZtB,EAAiBsB,GAaGC,KADJ,aAGA,wBAAIH,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SAGR,+BACCrB,EAAc8B,KAAI,YAAyC,IAAvCC,EAAsC,EAAtCA,MAAOJ,EAA+B,EAA/BA,KAAMK,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAC9C,OACI,wBAAIC,IAAKJ,EAAMK,MACX,4BAAI,yBAAKC,IAAKL,EAAQM,UACtB,4BAAKX,EAAKC,OACV,4BAAKD,EAAKY,MACV,4BAAKN,GACL,4BAAKC,EAAIM,cCpDtBC,MAPf,SAAiBC,GACb,OACA,uCAAKzD,UAAU,WAAcyD,KCgBlBC,MAdf,WAEE,OACE,yBAAK1D,UAAU,OACb,kBAAC,EAAD,KACA,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEF,kBAAC,EAAD,SCJc2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.74dbe0c6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./comp.css\"\n\n//Function that creates the header for our page\nfunction Header () {\n    return (\n        <div className=\"header\" id=\"header\">\n            <div class=\"container\" id=\"hcon\">\n            <h1>Welcome to the Employee Directory</h1>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","import axios from \"axios\";\n\n// Exporting an object containing a method for accessing the randomuser API\n// Should get back 350 random users to serve as our employees\nexport default {\n    getEmployees: function() {\n        return axios.get(\"https://randomuser.me/api/?results=100&nat=us\")\n    }\n}","import React from \"react\";\nimport \"./comp.css\"\n\nfunction Search ({handleSearchChange}) {\n    return (\n        <div className=\"form\">\n            <input type=\"search\" class=\"form-control\" id=\"inputBox\" placeholder=\"Search\" onChange={e => handleSearchChange(e)}></input>\n        </div>\n    )\n}\n\nexport default Search;","import React, {useState, useEffect, useImperativeHandle} from \"react\";\nimport API from \"../utils/API\";\nimport Search from \"./Search\"\nimport \"./comp.css\"\n\n// Function that creates the main section of the page that will include the dynamic content from the api\nfunction Main () {\n    const [users, setUsers] = useState([]);\n    const [filteredUsers, setFilteredUsers] = useState([]);\n\n    // Function to grab data from the api\n    useEffect(() => {\n        API.getEmployees().then(results => {\n            console.log(results.data.results);\n            setUsers(results.data.results)\n            setFilteredUsers(results.data.results)\n        })\n    },[])\n\n    // Function that will allow the search bar  to filter through the dynamic table of employees\n    const handleSearchChange = event => {\n        const searchTerm = event.target.value\n        const filteredList = users.filter (user => {\n            let values = Object.values(user).join(\"\").toLowerCase();\n            return values.indexOf(searchTerm.toLowerCase()) !== -1;\n        })\n        setFilteredUsers (filteredList)\n    }\n\n    // Function to sort the dynamic table based on its categories....currently bugged, works in console log but not on page\n    const sort = () => {\n        console.log(\"sort\")\n        const sortedList = filteredUsers.sort((a, b) => {\n           return a.name.first.localeCompare(b.name.first) \n        })\n        console.log(sortedList)\n        setFilteredUsers(sortedList)\n    }\n    return (\n        // content that we want to return from the main function including the search component and a table with dynamic content from the api\n        <div className=\"main\">\n            <div class=\"container\">\n            <Search handleSearchChange={handleSearchChange} />\n            <table class=\"table\" id=\"table\">\n                <thead class=\"thead-dark\" id=\"thead\">\n                    <tr>\n                        <th scope=\"col\"></th>\n                        <th scope=\"col\">First Name</th>\n                        <th scope=\"col\" onClick={() => \n                            sort() \n                        }>Last Name</th>\n                        <th scope=\"col\">Email</th>\n                        <th scope=\"col\">Age</th>\n                    </tr>\n                </thead>\n                <tbody>\n                {filteredUsers.map(({login, name, picture, email, dob}) => {\n                    return(\n                        <tr key={login.uuid}>\n                            <td><img src={picture.medium} /></td>\n                            <td>{name.first}</td>\n                            <td>{name.last}</td>\n                            <td>{email}</td>\n                            <td>{dob.age}</td>\n                        </tr>\n                    )\n                })}\n                </tbody>\n            </table>\n            </div>\n        </div>\n    )\n}\n\nexport default Main;","import React from \"react\";\nimport \"./comp.css\"\n\n// Function for the wrapper that will go on our page\nfunction Wrapper(props) {\n    return (\n    <div className=\"wrapper\" {...props} />\n    )\n}\n\n\nexport default Wrapper;","// content to be imported \nimport React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport Wrapper from \"./components/Wrapper\";\nimport Search from \"./components/Search\"\n\nfunction App() {\n  // returns the setup for the page\n  return (\n    <div className=\"App\">\n      <Wrapper>\n      <Header>\n        <Search />\n      </Header>\n      <Main />\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}